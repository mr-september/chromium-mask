name: Build and Release

on:
  push:
    tags:
      - "v*"
      - "[0-9]+.[0-9]+.[0-9]+"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., 1.0.2)"
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint-check

      - name: Get version from tag or input
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            # Extract version from tag (remove 'v' prefix if present)
            VERSION=$(echo "${{ github.ref_name }}" | sed 's/^v//')
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Update version in files
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          # Update package.json version
          sed -i "s/\"version\": \"[^\"]*\"/\"version\": \"$VERSION\"/" package.json
          # Update manifest.json version
          sed -i "s/\"version\": \"[^\"]*\"/\"version\": \"$VERSION\"/" src/manifest.json

      - name: Build extension
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          # Clean dist directory to avoid old builds
          rm -rf dist/*
          npm run build

      - name: Verify build output
        run: |
          ls -la dist/
          unzip -l dist/chromium-mask-v${{ steps.version.outputs.version }}.zip

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: chromium-mask-${{ steps.version.outputs.version }}
          path: dist/chromium-mask-v${{ steps.version.outputs.version }}.zip
          retention-days: 90

      - name: Cleanup old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            // Keep only the 3 most recent artifacts for this extension
            const extensionArtifacts = artifacts.data.artifacts
              .filter(artifact => artifact.name.startsWith('chromium-mask-'))
              .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));

            const artifactsToDelete = extensionArtifacts.slice(3);

            for (const artifact of artifactsToDelete) {
              console.log(`Deleting old artifact: ${artifact.name} (${artifact.created_at})`);
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
            }

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from tag
        id: version
        run: |
          VERSION=$(echo "${{ github.ref_name }}" | sed 's/^v//')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: chromium-mask-${{ steps.version.outputs.version }}
          path: ./

      - name: Verify downloaded files
        run: |
          echo "Files in current directory:"
          ls -la
          echo "Looking for zip files:"
          find . -name "*.zip" -type f
          # Remove any non-versioned zip files to avoid confusion
          if [ -f "chromium-mask.zip" ]; then
            echo "Removing non-versioned zip file"
            rm chromium-mask.zip
          fi
          echo "Final zip files:"
          find . -name "*.zip" -type f

      - name: Generate release notes
        id: release_notes
        run: |
          # Get commits since last tag
          LAST_TAG=$(git tag --sort=-version:refname | grep -v "^${{ github.ref_name }}$" | head -n 1)
          if [ -z "$LAST_TAG" ]; then
            # No previous tag found, get commits from the beginning or last 10 (whichever is smaller)
            COMMIT_COUNT=$(git rev-list --count HEAD)
            if [ "$COMMIT_COUNT" -gt 10 ]; then
              COMMITS=$(git log --oneline --pretty=format:"- %s" HEAD~10..HEAD)
            else
              COMMITS=$(git log --oneline --pretty=format:"- %s")
            fi
          else
            COMMITS=$(git log --oneline --pretty=format:"- %s" $LAST_TAG..HEAD)
          fi

          # Fetch current Chrome version
          echo "Fetching current Chrome version..."
          CHROME_VERSION=$(curl -s "https://raw.githubusercontent.com/mr-september/central_automation_hub/main/current-chrome-version.txt" | tr -d '\n\r')
          if [ -z "$CHROME_VERSION" ]; then
            CHROME_VERSION="Unknown"
            echo "Warning: Could not fetch Chrome version, using 'Unknown'"
          else
            echo "Current Chrome version: $CHROME_VERSION"
          fi

          # Create release notes
          {
            echo "## What's Changed"
            echo ""
            echo "$COMMITS"
            echo ""
            echo "## Current Default Chrome Version"
            echo ""
            echo "- **$CHROME_VERSION**"
            echo ""
            echo "## Installation"
            echo ""
            echo "### From Chrome Web Store (Recommended)"
            echo "Coming soon - extension is being prepared for Chrome Web Store submission"
            echo ""
            echo "### Manual Installation"
            echo "1. Download \`chromium-mask-v${{ steps.version.outputs.version }}.zip\` from the assets below"
            echo "2. Extract the ZIP file"
            echo "3. Open your Chromium browser's extensions page:"
            echo "   - **Opera**: \`opera://extensions/\`"
            echo "   - **Brave**: \`brave://extensions/\`"
            echo "   - **Edge**: \`edge://extensions/\`"
            echo "   - **Vivaldi**: \`vivaldi://extensions/\`"
            echo "   - **Chrome**: \`chrome://extensions/\`"
            echo "4. Enable \"Developer mode\" (usually in the top right corner)"
            echo "5. Click \"Load unpacked\" and select the extracted folder"
            echo ""
            if [ -n "$LAST_TAG" ]; then
              echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$LAST_TAG...${{ github.ref_name }}"
            else
              echo "**Full Changelog**: https://github.com/${{ github.repository }}/commits/${{ github.ref_name }}"
            fi
          } > release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Chromium Mask v${{ steps.version.outputs.version }}
          body_path: release_notes.md
          files: |
            chromium-mask-v${{ steps.version.outputs.version }}.zip
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup old releases
        uses: actions/github-script@v7
        with:
          script: |
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            // Keep only the 5 most recent releases, delete older ones
            const releasesToDelete = releases.data
              .filter(release => !release.draft && !release.prerelease)
              .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
              .slice(5);

            for (const release of releasesToDelete) {
              console.log(`Deleting old release: ${release.name} (${release.tag_name})`);
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.id,
              });
              
              // Also delete the associated tag
              try {
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `tags/${release.tag_name}`,
                });
                console.log(`Deleted tag: ${release.tag_name}`);
              } catch (error) {
                console.log(`Could not delete tag ${release.tag_name}: ${error.message}`);
              }
            }
